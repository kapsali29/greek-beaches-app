{"Name":"Picasso","Id":2004,"Alias":"square.picasso","Description":"# Picasso Details\n\n\u003ciframe src=\"https://appetize.io/embed/5w3cj57pegnx0av5kkacytd80r?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\n        style=\"float: right;margin-left:24px;\"\u003e\u0026nbsp;\u003c/iframe\u003e\n\n\u003e A powerful **image downloading** and **caching** library for Android.\n\nImages add much-needed context and visual flair to Android applications.\nPicasso allows for hassle-free image loading in your application -- often in one\nline of code!\n\n    Picasso.With(context)\n           .Load(\"http://i.imgur.com/DvpvklR.png\")\n           .Into(imageView);\n\nMany common pitfalls of image loading on Android are handled automatically by\nPicasso:\n\n  * Handling `ImageView` recycling and download cancelation in an adapter.\n  * Complex image transformations with minimal memory use.\n  * Automatic memory and disk caching.\n\n## Features\n\n### Adapter Downloads\n\nAdapter re-use is automatically detected and the previous download canceled:\n\n    public override View GetView(int position, View convertView, ViewGroup parent) {\n        SquaredImageView view = (SquaredImageView) convertView;\n        if (view == null) {\n            view = new SquaredImageView(context);\n        }\n      \n        string url = this[position];\n        Picasso.With(context).Load(url).Into(view);\n    }\n\n### Image Transformations\n\nTransform images to better fit into layouts and to reduce memory size:\n\n    Picasso.With(context)\n           .Load(url)\n           .Resize(50, 50)\n           .CenterCrop()\n           .Into(imageView);\n\nYou can also specify custom transformations for more advanced effects:\n\n    public class CropSquareTransformation : Java.Lang.Object, ITransformation\n    {\n        public Bitmap Transform(Bitmap source)\n        {\n            int size = Math.Min(source.Width, source.Height);\n            int x = (source.Width() - size) / 2;\n            int y = (source.Height() - size) / 2;\n            Bitmap result = Bitmap.CreateBitmap(source, x, y, size, size);\n            if (result != source) {\n                source.Recycle();\n            }\n            return result;\n        }\n    \n        public string Key\n        {\n            get { return \"square()\"; } \n        }\n    }\n\nPass an instance of this class to the `Transform` method:\n\n    Picasso.With(context)\n           .Load(\"http://i.imgur.com/DvpvklR.png\")\n           .Transform(new CropSquareTransformation())\n           .Into(imageView);\n\n### Place Holders\n\nPicasso supports both download and error placeholders as optional features:\n\n    Picasso.With(context)\n           .Load(url)\n           .Placeholder(Resource.Drawable.placeholder)\n           .Error(Resource.Drawable.error)\n           .Into(imageView);\n\nA request will be retried three times before the error placeholder is shown.\n\n### Resource Loading\n\nResources, assets, files, content providers are all supported as image\nsources:\n\n    // resources\n    Picasso.With(context)\n           .Load(Resource.Drawable.landing_screen)\n           .Into(imageView1);\n    // assets\n    Picasso.With(context)\n           .Load(\"file:///android_asset/DvpvklR.png\")\n           .Into(imageView2);\n    // files\n    Picasso.With(context)\n           .Load(new File(\"...\"))\n           .Into(imageView3);\n","Version":"2.5.2.2","Summary":"A powerful image downloading and caching library for Android.","QuickStart":"# Getting Started with Picasso\n\n\u003ciframe src=\"https://appetize.io/embed/5w3cj57pegnx0av5kkacytd80r?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\n        style=\"float: right;margin-left:24px;\"\u003e\u0026nbsp;\u003c/iframe\u003e\n\n\u003e A powerful **image downloading** and **caching** library for Android.\n\nImages add much-needed context and visual flair to Android applications.\nPicasso allows for hassle-free image loading in your application -- often in one\nline of code!\n\n    Picasso.With(context)\n           .Load(\"http://i.imgur.com/DvpvklR.png\")\n           .Into(imageView);\n\nMany common pitfalls of image loading on Android are handled automatically by\nPicasso:\n\n  * Handling `ImageView` recycling and download cancelation in an adapter.\n  * Complex image transformations with minimal memory use.\n  * Automatic memory and disk caching.\n\n## Features\n\n### Adapter Downloads\n\nAdapter re-use is automatically detected and the previous download canceled:\n\n    public override View GetView(int position, View convertView, ViewGroup parent) {\n        SquaredImageView view = (SquaredImageView) convertView;\n        if (view == null) {\n            view = new SquaredImageView(context);\n        }\n      \n        string url = this[position];\n        Picasso.With(context).Load(url).Into(view);\n    }\n\n### Image Transformations\n\nTransform images to better fit into layouts and to reduce memory size:\n\n    Picasso.With(context)\n           .Load(url)\n           .Resize(50, 50)\n           .CenterCrop()\n           .Into(imageView);\n\nYou can also specify custom transformations for more advanced effects:\n\n    public class CropSquareTransformation : Java.Lang.Object, ITransformation\n    {\n        public Bitmap Transform(Bitmap source)\n        {\n            int size = Math.Min(source.Width, source.Height);\n            int x = (source.Width() - size) / 2;\n            int y = (source.Height() - size) / 2;\n            Bitmap result = Bitmap.CreateBitmap(source, x, y, size, size);\n            if (result != source) {\n                source.Recycle();\n            }\n            return result;\n        }\n    \n        public string Key\n        {\n            get { return \"square()\"; } \n        }\n    }\n\nPass an instance of this class to the `Transform` method:\n\n    Picasso.With(context)\n           .Load(\"http://i.imgur.com/DvpvklR.png\")\n           .Transform(new CropSquareTransformation())\n           .Into(imageView);\n\n### Place Holders\n\nPicasso supports both download and error placeholders as optional features:\n\n    Picasso.With(context)\n           .Load(url)\n           .Placeholder(Resource.Drawable.placeholder)\n           .Error(Resource.Drawable.error)\n           .Into(imageView);\n\nA request will be retried three times before the error placeholder is shown.\n\n### Resource Loading\n\nResources, assets, files, content providers are all supported as image\nsources:\n\n    // resources\n    Picasso.With(context)\n           .Load(Resource.Drawable.landing_screen)\n           .Into(imageView1);\n    // assets\n    Picasso.With(context)\n           .Load(\"file:///android_asset/DvpvklR.png\")\n           .Into(imageView2);\n    // files\n    Picasso.With(context)\n           .Load(new File(\"...\"))\n           .Into(imageView3);\n","Hash":"381f2254905229599df0e64fc03f1a76","TargetPlatforms":["android"],"TrialHash":null}